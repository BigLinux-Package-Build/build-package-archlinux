name: Build Package

# Controls when the workflow will run
on:
  repository_dispatch:
    types:
      - biglinux/*
      - AUR/*
      # - xivastudio/*
      # - TKG/mesa-git
  
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: archlinux:latest
    steps:
      - uses: actions/checkout@v3
      
      - name: echo PayLoads
        run: |
          echo "url: ${{ github.event.client_payload.url }}"
          echo "branch: ${{ github.event.client_payload.branch }}"
          echo "extrarepo: ${{ github.event.client_payload.extrarepo }}"
          
      - name: Install Dependencies
        shell: bash
        run: |
          echo -e "[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
          pacman -Syu --noconfirm sudo git github-cli openssh gnupg coreutils rsync wget fakeroot binutils
          
      - name: Add BigLinux Repo and Key
        shell: bash
        run: |
          #add biglinux archlinux repository
          echo '
          [biglinux-archlinux]
          SigLevel = PackageRequired
          Server = https://repo.biglinux.com.br/archlinux/$arch' | tee -a /etc/pacman.conf
          
          echo '
          [biglinux-stable]
          SigLevel = PackageRequired
          Server = https://repo.biglinux.com.br/stable/$arch' | tee -a /etc/pacman.conf
          
          sed -i '/PACKAGER=/s/#PACKAGER=.*/\PACKAGER="BigLinux Package Build <bigbruno@gmail.com>\"/' /etc/makepkg.conf
          
          
          #add biglinux Keyring
          git clone --depth 1 https://github.com/biglinux/biglinux-keyring.git
          pushd biglinux-keyring
            install -m0644 biglinux.gpg /usr/share/pacman/keyrings/
            install -m0644 biglinux-trusted /usr/share/pacman/keyrings/
            install -m0644 biglinux-trusted /usr/share/pacman/keyrings/
          popd
          rm -rf biglinux-keyring
          
          # git clone https://github.com/biglinux/biglinux-key.git
          # mkdir -p /etc/pacman.d/gnupg/
          # cp -r biglinux-key/usr/share/pacman/keyrings/* /etc/pacman.d/gnupg/
          # rm -r biglinux-key
        
          pacman -Sy
      - name: Makepkg Build    
        shell: bash
        run: |
          useradd builduser -m 
          passwd -d builduser 
          printf 'builduser ALL=(ALL) ALL\n' | tee -a /etc/sudoers
          
          git clone ${{ github.event.client_payload.url }}.git
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          chmod 777 $gitfolder
          cd $gitfolder
          
          sudo -u builduser bash -c 'makepkg -s --noconfirm'
          
          ls -lh
          
      - name: Rename Package
        shell: bash -O extglob {0}
        run: | 
          # "Rename Package"
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          cd $gitfolder
          for i in *.zst; do if [ -n "$(ls $i | grep :)" ]; then mv $i $(echo $i | sed 's/:/-/'); fi; done

          
      - name: sign package
        shell: bash -O extglob {0}
        run: |
          # "Assinar Pacote"
          cat <(echo -e "${{ secrets.GPG_PRIVATE_KEY }}") | gpg --batch --import &>/dev/null
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          cd $gitfolder
          for p in $(find $PWD -maxdepth 1 -regex '.*\.pkg\.tar\.\(xz\|zst\)'); do
            gpg --pinentry-mode loopback --passphrase "${{ secrets.PASSPHRASE }}" --detach-sign ${p}
          done
      
      - name: CheckSum
        shell: bash -O extglob {0}
        run: |
          # "Checksum"
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          cd $gitfolder
          echo '#!/bin/bash
          for i in $(ls *.zst); do md5sum $i >> $i.md5; done
          for i in $(ls *.sig | sed 's/.sig//'); do md5sum $i.sig >> $i.md5; done
          exit 0' > md5.sh
          bash md5.sh
            
            
  Push:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Publish Package on GitHub
        shell: bash
        run: |
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          cd $gitfolder
          ls -lh
          
          #Release#
          source PKGBUILD
          release=${pkgname}-${pkgver}-${pkgrel}
          
          echo ${{ github.token }} | gh auth login --with-token
          repo=${{ github.repository }}
          
          gh release create ${release} --title ${release} --repo ${repo} --notes "automated release from ${{ github.event.client_payload.url }}" || echo "release already exists"
          GITHUB_LINK=https://github.com/${repo}/releases/download/${release}
          for i in .zst .sig .tar .md5; do
            find -iname "*$i" -exec gh release upload ${release} --repo ${repo} --clobber {} \;
          done
       
      - name: Push to Repo
        shell: bash
        run: |
          echo "## ssh setup"
          mkdir -p /home/runner/.ssh
          touch /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          #ssh-agent -a /tmp/ssh_agent.sock > /dev/null
          echo "${{ secrets.PKGBUILD_KEY }}" >> /home/runner/.ssh/github_actions
          eval `ssh-agent -s`
          ssh-add /home/runner/.ssh/github_actions
          ssh-keyscan -t rsa -p ${{ secrets.PKGBUILD_PORT }} ${{ secrets.PKGBUILD_HOST }} >> /home/runner/.ssh/known_hosts
          
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          cd $gitfolder
          ls -lh
          # if [ -n "$(echo ${{ github.event.client_payload.branch }} | grep stable )" ];then branch=stable; else branch=testing; fi
          
          branch=archlinux
          for i in *.zst *.sig *.md5; do
          test -e $i && rsync -vapz -e "ssh -p ${{ secrets.PKGBUILD_PORT }}" $i ${{ secrets.PKGBUILD_USER }}@${{ secrets.PKGBUILD_HOST }}:${{ secrets.PKGBUILD_ARCHLINUX_DIR }}
          sleep 10
          done
          exit 0
          
      #- name: Telegram Alert End
        #shell: bash
        #run: |
          #curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID_ARCHLINUX }}", "text": "Pacote: ${{ github.event.action }} criado e enviado a partir do branch ${{ github.ref_name }}", "disable_notification": true}' ${{ secrets.MESSAGE_BOT_KEY }}
          
      - name: Telegram Alert Fail
        if: ${{ failure() || cancelled() }}
        run: |
          curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID_ARCHLINUX }}", "text": "FALHA ao criar Pacote: ${{ github.event.action }} a partir do repo archinux, link do erro: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}", "disable_notification": false}' ${{ secrets.MESSAGE_BOT_KEY }}
          
        ## Tmate ##
      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3 
          
        
        
        
        
        
        
        
        
        
        
#      - name: upload-cdn77
#        shell: bash -O extglob {0}
#        run: |
#          # if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
#          if [ -z "${{ inputs.cdn77-host }}" ] || [ -z "${{ inputs.cdn77-user }}" ] || [ -z "${{ inputs.cdn77-pwd }}" ]; then 
#            echo "## not (all) credentials given for cdn77 upload"
#            exit 0
#          fi
#          
#          echo "## cdn77 upload"
#          
#          ssh-keyscan -t rsa ${{ inputs.cdn77-host }} >> /home/runner/.ssh/known_hosts
#          ## create target dir
#          sshpass -p "${{ inputs.cdn77-pwd }}" rsync -vaP --stats -e ssh ${{ inputs.edition }} \
#            ${{ inputs.cdn77-user }}@${{ inputs.cdn77-host }}:/www/
#          # upload
#          sshpass -p "${{ inputs.cdn77-pwd }}" rsync -vaP \
#            --stats -e ssh ${{ steps.upload-prepare.outputs.upload-files }} \
#            ${{ inputs.cdn77-user }}@${{ inputs.cdn77-host }}:/www/${{ inputs.edition }}/${{ inputs.version }}/
